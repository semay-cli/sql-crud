
package manager

import (
	"fmt"
	{{- range .AppNames}}
	{{ . | replaceString }} "{{$.ProjectName}}/{{ . }}/models"
	"{{$.ProjectName}}/configs"
	{{- end }}
	"github.com/spf13/cobra"
	"go.uber.org/dig"
)

var (
	{{.AppName | replaceString }}migrate= &cobra.Command{
		Use:   "migrate",
		Short: "Run Database Migration for found in init migration Models",
		Long:  "Migrate to init database",
		Run: func(cmd *cobra.Command, args []string) {
			// Check for the type flag
			migrateType, _ := cmd.Flags().GetString("type")
			appName, _ := cmd.Flags().GetString("app")

			env, _ := cmd.Flags().GetString("env")

			// if enviroment variable not provided setting default to dev
			container := buildContainer()

			err := container.Invoke(func(cfg *configs.EnvConfig) {
				cfg.SetEnv(env)
			switch migrateType {
			case "create":
				init_migrate(appName,cfg)
			default:
				populate_migrate(appName,cfg)
			}
			})
			if err != nil {
				fmt.Println(err)
			}
		},
	}

	{{.AppName | replaceString }}clean= &cobra.Command{
		Use:   "clean",
		Short: "Drop Database Models for found in init migration Models",
		Long:  "Drop Models found in the models definition",
			Run: func(cmd *cobra.Command, args []string) {
			appName, _ := cmd.Flags().GetString("app")
			env, _ := cmd.Flags().GetString("env")
			// if enviroment variable not provided setting default to dev
			container := buildContainer()

			err := container.Invoke(func(cfg *configs.EnvConfig) {
				cfg.SetEnv(env)
				clean_database(appName, cfg)
			})
			if err != nil {
				fmt.Println(err)
			}
		},
	}

	{{ if eq .AuthAppName .AppName }}
	createsuperuser = &cobra.Command{
		Use:   "superuser",
		Short: "Create super user",
		Long:  "Create super user",
		Run: func(cmd *cobra.Command, args []string) {
            container := buildContainer()
			err := container.Invoke(func(cfg *configs.EnvConfig) {
			{{ .AuthAppName | replaceString }}.CreateSuperUser(cfg)
			})
			if err != nil {
				fmt.Println(err)
			}
			fmt.Println("Super user created successfully")
		},
	}
	{{- end}}

)

func buildMigrationContainer() *dig.Container {
	container := dig.New()

	mustProvide := func(err error) {
		if err != nil {
			panic(fmt.Errorf("dig provide failed: %w", err))
		}
	}

	// Provide configuration
	mustProvide(container.Provide(configs.NewEnvConfig))

	return container
}


func init_migrate(app_name string,cfg *configs.EnvConfig) {
	switch app_name{
    {{- range .AppNames}}
	case "{{ . }}":
		{{ . | replaceString }}.InitDatabase(false,cfg)
		fmt.Println("Migrated {{ . }} Database Models sucessfully")
    {{- end }}
	default:
		fmt.Println("No App provided, please provide existing app name")
	}
}

func populate_migrate(app_name string, cfg *configs.EnvConfig) {
{{- if eq .AuthAppType "standalone" }}
    {{- range .AppNames }}
        {{ replaceString . }}.Populate(false,cfg)
    {{- end }}
    fmt.Println("Auth Populated Successfully. Database Models populated successfully.")
{{- end }}

{{- if eq .AuthAppType "sso" }}
	switch app_name {
    {{- range .AppNames }}
	case "{{ . }}":
        {{ replaceString . }}.ResourceMigration(cfg)
    	fmt.Println("{{ . }} Resources Created Successfully. Database Models populated successfully.")
    {{- end }}
	default:
		fmt.Println("No App provided, please provide existing app name")
	}
{{- end }}

}


func clean_database(app_name string,cfg *configs.EnvConfig) {
	switch app_name{
	{{- range .AppNames}}
	case "{{ . }}":
		{{ . | replaceString }}.CleanDatabase(false,cfg)
		fmt.Println("Dropped Tables sucessfully")
	{{- end}}
	default:
		fmt.Println("No App provided, please provide existing app name")
	}
}

func init() {
	{{.AppName | replaceString }}migrate.Flags().StringP("type", "t", "", "Specify create to \"create\" the models to database, and \"populate\" to populate default permissions and content types")
	{{.AppName | replaceString }}migrate.Flags().StringP("app", "a", "", "Specify for which app to migrate app meta data to sso app")
	{{.AppName | replaceString }}clean.Flags().StringP("app", "a", "", "Specify for which app to migrate app meta data to sso app")
	blue_adminmigrate.Flags().StringP("env", "e", "", "Specify which config .env file to load from \"dev\",\"prod\", ...")
	goFrame.AddCommand({{.AppName | replaceString }}migrate)
	goFrame.AddCommand({{.AppName | replaceString }}clean)
	goFrame.AddCommand(createsuperuser)
}
