import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { {{.LowerName}}PostSchema, {{.Name}}FormPostValues } from "@/schemas/{{.LowerName}}Schema";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useEffect } from "react";

type Props = {
  initialData?: {{.Name}}FormPostValues; // for editing
  onSubmit: (data: {{.Name}}FormPostValues) => void;
  isEditing?: boolean;
};

export default function {{.Name}}Form({ initialData, onSubmit, isEditing }: Props) {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<{{.Name}}FormPostValues>({
    resolver: zodResolver({{.LowerName}}PostSchema),
    defaultValues: initialData || {
     {{- range .Fields}} {{.LowerName | toSnakeCase }}: "", {{- end}}
    },
  });

  // Reset form when initialData changes (e.g. when editing a different customer)
  useEffect(() => {
    if (initialData) {
      form.reset(initialData);
    }
  }, [initialData, reset]);


function onSubmitHandler(data: {{.Name}}FormPostValues) {
    onSubmit(data);
    if (!isEditing) {
      reset();
    }
  }


  return (
    <form onSubmit={handleSubmit(onSubmitHandler)} className="grid grid-cols-2 gap-4">
        {{- range .Fields}}
            <div>
                <Label>{{.Name}}</Label>
                <Input {...register("{{.Name | toSnakeCase }}")} />
                {errors.{{.Name  | toSnakeCase }} && <p className="text-sm text-red-500">{errors.{{.Name |  | toSnakeCase }}.message}</p>}
            </div>
        {{- end}}
        <div className="col-span-2 mt-4 flex gap-2 justify-end">
            <Button type="submit" className="bg-blue-600 text-white">
            {isEditing ? "Update" : "Save"}
            </Button>
            {/* <Button type="button" variant="outline" onClick={() => reset()}>
            Cancel
            </Button> */}
        </div>
    </form>
  );
}
