package utils

import (
	"fmt"
	"reflect"
	{{- if eq .AuthAppName .CurrentAppName }}
	"time"
	"{{.ProjectName}}/{{.CurrentAppName}}/models"
	"github.com/golang-jwt/jwt/v5"
	{{- end }}
)

{{- if eq .AuthAppName .CurrentAppName }}
type UserClaim struct {
	jwt.RegisteredClaims
	Email       string   {{.BackTick}}json:"email"{{.BackTick}}
	FirstName string   {{.BackTick}}json:"first_name"{{.BackTick}}
	LastName  string   {{.BackTick}}json:"last_name"{{.BackTick}}
	{{- if eq .AuthAppType "standalone" }}
	Permissions []string {{.BackTick}}json:"permissions"{{.BackTick}}
	{{- end}}
	{{- if eq .AuthAppType "sso" }}
	Scopes []string {{.BackTick}}json:"scopes"{{.BackTick}}
	UUID        string   {{.BackTick}}json:"uuid"{{.BackTick}}
	{{- end}}
	Groups      []string {{.BackTick}}json:"groups"{{.BackTick}}
	UserID      int      {{.BackTick}}json:"user_id"{{.BackTick}}
}

func PasswordsMatch(hashedPassword, currPassword string) bool {

	var currPasswordHash = models.HashFunc(currPassword)
	return hashedPassword == currPasswordHash
}

// source of this token encode decode functions
// https://github.com/gurleensethi/go-jwt-tutorial/blob/main/main.go
func CreateJWTToken(user models.User, permissions, groups []string, duration int) (string, error) {
	my_claim := UserClaim{
		RegisteredClaims: jwt.RegisteredClaims{},
		Email:            user.Email,
		FirstName:        user.FirstName,
		LastName:         user.LastName,
		{{- if eq .AuthAppType "standalone" }}
		Permissions:      permissions,
		{{- end }}
		{{- if eq .AuthAppType "sso" }}
		Scopes:      permissions,
		UUID:             user.UUID,
		{{- end }}
		Groups:           groups,
		UserID:           int(user.ID),
	}

	salt_a, _ := GetJWTSalt()
	exp := time.Now().UTC().Add(time.Duration(duration) * time.Minute)
	my_claim.ExpiresAt = jwt.NewNumericDate(exp)
	my_claim.Issuer = "Blue Admin"
	my_claim.Subject = "UI Authentication Token"
	token := jwt.NewWithClaims(jwt.SigningMethodHS512, my_claim)
	signedString, err := token.SignedString([]byte(salt_a))
	if err != nil {
		return "", fmt.Errorf("error creating signed string: %v", err)
	}

	return signedString, nil
}

func ParseJWTToken(jwtToken string) (UserClaim, error) {
	salt_a, salt_b := GetJWTSalt()
	response_a := UserClaim{}
	response_b := UserClaim{}

	token_a, aerr := jwt.ParseWithClaims(jwtToken, &response_a, func(token *jwt.Token) (any, error) {
		return []byte(salt_a), nil
	})
	token_b, berr := jwt.ParseWithClaims(jwtToken, &response_b, func(token *jwt.Token) (any, error) {
		return []byte(salt_b), nil
	})

	if aerr != nil && berr != nil {
		return UserClaim{}, aerr
	}

	// check token validity, for example token might have been expired
	if !token_a.Valid {
		if !token_b.Valid {
			return UserClaim{}, fmt.Errorf("invalid token with second salt")
		}
		return response_b, nil
	}
	return response_a, nil

}

{{- end }}

// Return Unique values in list
func UniqueSlice(slice []string) []string {
	keys := make(map[string]bool)
	list := []string{}
	for _, entry := range slice {
		if _, value := keys[entry]; !value {
			keys[entry] = true
			list = append(list, entry)
		}
	}
	return list
}

// Return Unique values in list
func CheckValueExistsInSlice(slice []string, role_test string) bool {
	for _, role := range slice {
		if role == role_test || role == "superuser" {
			return true
		}
	}
	return false
}

// Struct to Map conversion function
func StructToMap(input any) (map[string]any, error) {
	// Create an empty map
	result := make(map[string]any)

	// Get the reflect value of the struct
	val := reflect.ValueOf(input)

	// Ensure that the input is a pointer to a struct
	if val.Kind() == reflect.Ptr {
		val = val.Elem()
	}

	// Check if the input is a struct
	if val.Kind() != reflect.Struct {
		return nil, fmt.Errorf("input is not a struct")
	}

	// Loop through the struct fields
	for i := 0; i < val.NumField(); i++ {
		// Get the field and its name
		field := val.Field(i)
		fieldName := val.Type().Field(i).Name

		// Insert the field name and value into the map
		result[fieldName] = field.Interface()
	}

	return result, nil
}
