package observe

import (
	"context"
	"fmt"
    "strconv"
	"strings"


	"{{.ProjectName}}/configs"
	"go.opentelemetry.io/otel"
	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/sdk/resource"
	sdktrace "go.opentelemetry.io/otel/sdk/trace"
	semconv "go.opentelemetry.io/otel/semconv/v1.4.0"
	oteltrace "go.opentelemetry.io/otel/trace"
)

func NewAppTracer(cfg *configs.EnvConfig) oteltrace.Tracer {
	return otel.Tracer(fmt.Sprintf("cli-server-%v", cfg.GetOrDefault("APP_NAME", "blue-app")))
}

func InitTracer(cfg *configs.EnvConfig) *sdktrace.TracerProvider {
	traceExporter := cfg.Get("TRACE_EXPORTER")
	tracerHost := cfg.Get("TRACER_HOST")
	tracerPort := cfg.GetOrDefault("TRACER_PORT", "4317") // Default to gRPC port

	// Create resource with service name
	res := resource.NewWithAttributes(
		semconv.SchemaURL,
		semconv.ServiceNameKey.String(cfg.Get("APP_NAME")),
	)

	// Use TraceIDRatioBased for random sampling (10% here) if env not set
	sample_size, _ := strconv.ParseFloat(cfg.GetOrDefault("TRACER_SAMPLE", "0.1"), 32)
	sampler := sdktrace.ParentBased(sdktrace.TraceIDRatioBased(sample_size))

	// Create TracerProvider
	tp := sdktrace.NewTracerProvider(
		sdktrace.WithResource(res),
		sdktrace.WithSampler(sampler),
	)

	// Set global tracer provider and propagator
	otel.SetTracerProvider(tp)
	otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))

	if strings.ToLower(traceExporter) == "jaeger" && tracerHost != "" {
		exporter, err := otlptracegrpc.New(context.Background(),
			otlptracegrpc.WithInsecure(),
			otlptracegrpc.WithEndpoint(fmt.Sprintf("%s:%s", tracerHost, tracerPort)),
		)
		if err != nil {
			panic(fmt.Sprintf("Failed to create Jaeger exporter: %v", err))
		}

		// Register batch span processor
		batcher := sdktrace.NewBatchSpanProcessor(exporter)
		tp.RegisterSpanProcessor(batcher)
	}

	return tp
}

func EchoAppSpanner(ctx echo.Context, span_name string, appTracer oteltrace.Tracer) (context.Context, oteltrace.Span) {
	gen, _ := uuid.NewV7()
	id := gen.String()

	//  getting request body
	trace, span := appTracer.Start(ctx.Request().Context(), span_name,
		oteltrace.WithAttributes(attribute.String("id", id)),
	)
	return trace, span
}

type RouteTracer struct {
	Tracer context.Context
	Span   oteltrace.Span
}
