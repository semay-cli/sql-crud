package services

import (
	"context"
	"fmt"
	"time"
	"strconv"
	{{- $break_3 := false }}
	{{- range .Fields }}
		{{- if eq .Name "UUID" }}
			{{- $break_3 = true }}
		{{- end }}
	{{- end }}

	{{- if $break_3 }}
	"github.com/google/uuid"
	{{- end }}

	"{{ .ProjectName }}/{{ $.AppName }}/models"
	 "gorm.io/gorm"
	"github.com/jinzhu/copier"
)



// Create inserts a new {{.LowerName}}
func (s *AppDatabaseService) Create{{.Name}}(ctx context.Context, posted_{{.LowerName}} *models.{{.Name}}Post) (*models.{{.Name}}Get, error) {
	var created{{.Name}} = new(models.{{.Name}}Get)

	err := s.withTransaction(ctx, func(tx *gorm.DB) error {
			{{- range .Fields}} {{- if .Post}}
				{{- if eq .Name "Password" }}
			hashedPassword := models.HashFunc(posted_user.Password)
				{{- end }}
			{{- end }}
			{{- if eq .Name "UUID" }}
			{{.LowerName}}_uuid, _ := uuid.NewV7()
				{{- end }}
			{{- end }}

			{{.LowerName}} := models.{{.Name}}{
			{{- range .Fields}} {{- if .Post}}
				{{- if eq .Name "Password" }}
					{{.Name}}:  hashedPassword,
				{{- else if eq .Name "UUID" }}
					{{.Name}}:  uuid.String(),
				{{- else }}
					{{.Name}}:  posted_{{.ModelName | toLowerCaseName }}.{{.Name}},
				{{- end	}}
			{{- end}}
				{{- if eq .Name "UUID" }}
					{{.Name}}:	{{.LowerName}}_uuid.String(),
				{{- end }}
			{{- end}}
					CreatedAt:   time.Now(),
			}


			err := tx.Create(&{{.LowerName}}).Error
			if err != nil {
				return fmt.Errorf("{{.LowerName}} creatoin failed: %v", err)
			}

            // copier.Copy(created{{.Name}} , {{.LowerName}})
      		err = copier.CopyWithOption(created{{.Name}}, {{.LowerName}}, copier.Option{DeepCopy: true})
      		if err != nil {
     			return err
      		}

			return nil
		})


		return created{{.Name}}, err
}

// GetOne fetches a {{.LowerName}} by ID
func (s *AppDatabaseService) GetOne{{.Name}}(ctx context.Context, id string) (*models.{{.Name}}Get, error) {
    // checking Cache if it exists
   	cacheKey := "{{.LowerName}}:" + id
	if cached{{.Name}}, found := AppCacheService.Get(cacheKey); found {
		return cached{{.Name}}.(*models.{{.Name}}Get), nil
	}


	objID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid ID: %v", err)
	}

	var {{.LowerName}} models.{{.Name}}Get
	result := s.DB.WithContext(ctx).Model(&models.{{.Name}}{}).Where("id = ?", objID).Scan(&{{.LowerName}})
	if result.Error != nil {
		return nil, result.Error
	}
	if result.RowsAffected == 0 {
		return nil, fmt.Errorf("no users found")
	}

    // Setting Cache before returning the user
    AppCacheService.Set(cacheKey, &{{.LowerName}})

	return &{{.LowerName}}, nil
}

// Get returns {{.LowerName}}s with paginatoin and search
func (s *AppDatabaseService) Get{{.Name}}s(ctx context.Context, pagination models.Pagination, searchTerm map[string]any) ([]models.{{.Name}}Get, uint, error) {

	// Build search query if any
	// Create a base query
	query := s.DB.Model(&models.{{.Name}}{})

	// Apply search filters dynamically based on the provided searchTerm map
	if len(searchTerm) > 0 {

		// Loop through the searchTerm map and dynamically apply filters( for boolean values)
		for key, value := range searchTerm {
			// Search logic for boolean values
			if boolValue, ok := value.(string); ok && (boolValue == "true" || boolValue == "false") {
				switch boolValue {
				case "true":
					query = query.Where(key+" = ?", true)
				case "false":
					query = query.Where(key+" = ?", false)

				}
				delete(searchTerm, key)
			}

		}

		// Loop through the searchTerm map and dynamically apply filters
		for key, value := range searchTerm {
			// Apply "LIKE" condition for string fields (or exact match for other types)
			if strValue, ok := value.(string); ok && strValue != "" {
				query = query.Or(key+" LIKE ?", "%"+strValue+"%")
			}
		}
	}

	// Count all documents (no filter)
	var totalCount int64
	query.WithContext(ctx).Select("id").Count(&totalCount)


	var {{.LowerName}}s []models.{{.Name}}Get
	_ = pagination.Validate()
	offset := int((pagination.Page - 1) * pagination.Size)
	result := query.WithContext(ctx).Order("id asc").Limit(int(pagination.Size)).Offset(offset).Scan(&{{.LowerName}}s)
	if result.Error != nil {
		return nil, 0, result.Error
	}
	if result.RowsAffected == 0 {
		return nil, 0, fmt.Errorf("no users found")
	}


	return {{.LowerName}}s,uint(totalCount), nil
}

// Update modifies a {{.Name}}s by ID
func (s *AppDatabaseService) Update{{.Name}}(ctx context.Context, patch_{{.LowerName}} *models.{{.Name}}Patch, id string) (*models.{{.Name}}Get, error) {
	// update User
	var updated{{.Name}} *models.{{.Name}}Get

	{{.LowerName}}_id, err := strconv.Atoi(id)
	if err != nil {
		return &models.{{.Name}}Get{},fmt.Errorf("invalid ID: %v", err)
	}

	err = s.withTransaction(ctx, func(tx *gorm.DB) error {
			updateFields := make(map[string]any)
			{{- range .Fields}} {{- if .Patch}}
			{{- if eq .Name "Password" }}
			if patch_{{$.LowerName}}.{{.Name}} != nil {
				// setting password string to hash
				hashedPassword := models.HashFunc(*patch_{{$.LowerName}}.Password)
				updateFields["{{.Name | camelToSnake }}"] = hashedPassword
			}
			{{- else if eq .Name "ID" }}

			{{- else }}
			if patch_{{$.LowerName}}.{{.Name}} != nil {
				updateFields["{{.Name | camelToSnake }}"] = *patch_{{$.LowerName}}.{{.Name}}
			}
			{{- end	}}
			{{- end}}
			{{- end}}
			updateFields["updated_at"]=time.Now()


			
			// Update the document by ID
			result := s.DB.WithContext(ctx).Model(&models.{{.Name}}{}).Where("id= ?", {{.LowerName}}_id).Updates(updateFields)
			if result.Error != nil {
			return fmt.Errorf("update failed: %v", result.Error)
			}

			if result.RowsAffected == 0 {
				return fmt.Errorf("items does not exist found")
			}

			// Removing Cache if update sucess
			cacheKey := "{{.LowerName}}:" + id
			AppCacheService.Delete(cacheKey)

			return nil
		})

	copier.Copy(&updated{{.Name}}, patch_{{.LowerName}})
	return updated{{.Name}}, err
}

// Delete removes a {{.LowerName}} by ID
func (s *AppDatabaseService) Delete{{.Name}}(ctx context.Context, id string) error {

	err := s.withTransaction(ctx, func(tx *gorm.DB) error {
		objID, err := strconv.Atoi(id)
		if err != nil {
			return fmt.Errorf("invalid ID: %v", err)
		}
		var {{.LowerName}} models.{{.Name}}
		err = s.DB.WithContext(ctx).Where("id = ?", objID).First(&{{.LowerName}}).Delete(&{{.LowerName}}).Error
		if err != nil {
			return err
		}
		// Removing Cache if delete sucess
		cacheKey := "{{.LowerName}}:" + id
		AppCacheService.Delete(cacheKey)

		return nil
	})

	return err
}

