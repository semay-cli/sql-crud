package cache

import (
	"context"
	"fmt"
	"time"
	"strconv"

	"{{ .ProjectName }}/configs"
	"github.com/redis/go-redis/v9"
)

type RedisCacheService struct {
	client *redis.Client
	ttl    time.Duration
	prefix string // <-- new field for key namespace
}

func atoi(s string) int {
    i, err := strconv.Atoi(s)
    if err != nil {
        // Handle error: possibly log or panic
        return 0
    }
    return i
}


// NewCacheService creates a new CacheService with Redis connection and key prefix
func NewRedisCacheService(appName string ,cfg *configs.EnvConfig) (*RedisCacheService, error) {
	client := redis.NewClient(&redis.Options{
		Addr:     cfg.Get(fmt.Sprintf("%v_RedisURL", appName)),
		Password: cfg.Get(fmt.Sprintf("%v__RedisPassword", appName)),
		DB:       atoi(cfg.Get(fmt.Sprintf("%v_RedisDB", appName))),
	})

	ctx := context.Background()
	if err := client.Ping(ctx).Err(); err != nil {
		return nil, err
	}

    cacheTTL := time.Duration(atoi(cfg.Get(fmt.Sprintf("%v_RedisTTL", appName)))) * time.Minute


	return &RedisCacheService{
		client: client,
		ttl:    cacheTTL,
		prefix: cfg.Get(fmt.Sprintf("%v_RedisPrefix", appName)), // <-- assumes you add this to your config
	}, nil
}

// namespaced returns a namespaced version of the key
func (c *RedisCacheService) namespaced(key string) string {
	if c.prefix == "" {
		return key
	}
	return fmt.Sprintf("%s:%s", c.prefix, key)
}

func (c *RedisCacheService) Get(ctx context.Context, key string) (any, bool) {
	key = c.namespaced(key)

	val, err := c.client.Get(ctx, key).Result()
	if err == redis.Nil {
		return nil, false
	} else if err != nil {
		// Log the error here if needed
		return nil, false
	}
	return val, true
}

func (c *RedisCacheService) Set(ctx context.Context, key string, value any) bool {
	key = c.namespaced(key)

	err := c.client.Set(ctx, key, value, c.ttl).Err()
	return err == nil
}

func (c *RedisCacheService) SetWithTTL(ctx context.Context, key string, value any, ttl time.Duration) bool {
	key = c.namespaced(key)

	err := c.client.Set(ctx, key, value, ttl).Err()
	return err == nil
}

func (c *RedisCacheService) Delete(ctx context.Context, key string) {
	key = c.namespaced(key)
	c.client.Del(ctx, key)
}

func (c *RedisCacheService) Close() error {
	return c.client.Close()
}

func (c *RedisCacheService) IsHealthy() bool {
	return c.client.Ping(context.Background()).Err() == nil
}
