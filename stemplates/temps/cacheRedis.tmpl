package cache

import (
	"context"
	"fmt"
	"time"

	""{{ .ProjectName }}/configs""
	"github.com/redis/go-redis/v9"
)

type CacheService struct {
	client *redis.Client
	ttl    time.Duration
	prefix string // <-- new field for key namespace
}

// NewCacheService creates a new CacheService with Redis connection and key prefix
func NewCacheService(cfg *common.Config) (*CacheService, error) {
	client := redis.NewClient(&redis.Options{
		Addr:     cfg.{{ .AppName | replaceStringCapitalize }}_RedisURL,
		Password: cfg.{{ .AppName | replaceStringCapitalize }}_RedisPassword,
		DB:       cfg.{{ .AppName | replaceStringCapitalize }}_RedisDB,
	})

	ctx := context.Background()
	if err := client.Ping(ctx).Err(); err != nil {
		return nil, err
	}

	return &CacheService{
		client: client,
		ttl:    time.Duration(cfg.RedisTTL) * time.Minute,
		prefix: cfg.{{ .AppName | replaceStringCapitalize }}_RedisPrefix, // <-- assumes you add this to your config
	}, nil
}

// namespaced returns a namespaced version of the key
func (c *CacheService) namespaced(key string) string {
	if c.prefix == "" {
		return key
	}
	return fmt.Sprintf("%s:%s", c.prefix, key)
}

func (c *CacheService) Get(ctx context.Context, key string) (any, bool) {
	key = c.namespaced(key)

	val, err := c.client.Get(ctx, key).Result()
	if err == redis.Nil {
		return nil, false
	} else if err != nil {
		// Log the error here if needed
		return nil, false
	}
	return val, true
}

func (c *CacheService) Set(ctx context.Context, key string, value any) bool {
	key = c.namespaced(key)

	err := c.client.Set(ctx, key, value, c.ttl).Err()
	return err == nil
}

func (c *CacheService) SetWithTTL(ctx context.Context, key string, value any, ttl time.Duration) bool {
	key = c.namespaced(key)

	err := c.client.Set(ctx, key, value, ttl).Err()
	return err == nil
}

func (c *CacheService) Delete(ctx context.Context, key string) {
	key = c.namespaced(key)
	c.client.Del(ctx, key)
}

func (c *CacheService) Close() error {
	return c.client.Close()
}

func (c *CacheService) IsHealthy() bool {
	return c.client.Ping(context.Background()).Err() == nil
}
