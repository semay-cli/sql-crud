package services

import (
	"context"
	"{{ .ProjectName }}/cache"
	"gorm.io/gorm"
)

var AppCacheService *cache.CacheService
var AppService AppDatabaseService

// AppDatabase Service wraps Dababase service(SQL)
type AppDatabaseService struct {
	DB *gorm.DB
}



func InitServices(client *gorm.DB) {
	var err error
	AppCacheService, err = cache.NewCacheService()
	if err != nil {
		panic("Unable to initialize cache service")
	}

	AppService = AppDatabaseService{
		DB: client,
	}

}


// Utility function for transactions
func (s *AppDatabaseService) withTransaction(ctx context.Context, fn func(tx *gorm.DB) error) error {
    // Start the transaction with context (e.g., tracing)
    tx := s.DB.WithContext(ctx).Begin()
    if tx.Error != nil {
        return tx.Error
    }

    // Ensure rollback on panic
    defer func() {
        if r := recover(); r != nil {
            tx.Rollback()
        }
    }()

    // Execute transactional logic
    if err := fn(tx); err != nil {
        tx.Rollback()
        return err
    }

    // Commit if no errors
    return tx.Commit().Error
}


