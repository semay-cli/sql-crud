package services

import (
	"math/rand"
	"strconv"

	"{{.ProjectName}}/{{.CurrentAppName}}/models"
	"{{.ProjectName}}/configs"
	
)

const (
	charsetLen = 62
	charset    = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
)

func GenerateRandomString(length int) (string, error) {
	result := make([]byte, length)

	for i := 0; i < length; i++ {
		index := rand.Intn(charsetLen)
		result[i] = charset[index]
	}

	return string(result), nil
}



func JWTSaltUpdate() {
	//  getting salt length from configuration file
	salt_length, _ := strconv.Atoi(configs.AppConfig.Get("JWT_SALT_LENGTH"))

	//  generating for salt A
	salt_a, _ := GenerateRandomString(salt_length)

	//  defining jwt _object to work with
	var jwt_object models.JWTSalt

	// Fethching the JWT object if it exists
	AppService.DB.Model(&models.JWTSalt{}).Where("id = ?", 1).First(&jwt_object)

	// If it exists updating or creating if it does not exist
	if jwt_object.ID == 1 {
		// salt_b =
		jwt_object.SaltB = jwt_object.SaltA
		jwt_object.SaltA = salt_a

		tx := AppService.DB.Begin()
		if err := AppService.DB.Updates(&jwt_object).Error; err != nil {

			tx.Rollback()
		}
		tx.Commit()

		//Clear cache if updated
		// Removing Cache if update sucess
		cacheKey := "{{ .CurrentAppName | replaceString}}	_salt:1"
		AppCacheService.Delete(cacheKey)

	} else {
		// generating salt b and creating new
		salt_b, _ := GenerateRandomString(salt_length)
		jwt_object.SaltA = salt_a
		jwt_object.SaltB = salt_b

		tx := AppService.DB.Begin()
		// add  data using transaction if values are valid
		if err := tx.Create(&jwt_object).Error; err != nil {

			tx.Rollback()

		}
		tx.Commit()

	}

}

func GetJWTSalt() (salt_a string, salt_b string) {

	// checking Cache if it exists
	cacheKey := "{{ .CurrentAppName | replaceString}}_salt:1"
	if cachedJWTSalt, found := AppCacheService.Get(cacheKey); found {
		return cachedJWTSalt.(*models.JWTSaltGet).SaltA, cachedJWTSalt.(*models.JWTSaltGet).SaltB
	}

	var jwt_object models.JWTSalt
	// Fethching the JWT object if it exists
	AppService.DB.Model(&models.JWTSalt{}).Where("id = ?", 1).First(&jwt_object)

	// check cache

	salt_a = jwt_object.SaltA
	salt_b = jwt_object.SaltB
	if salt_a == "" {
		JWTSaltUpdate()
	}

	// Setting Cache before returning the user
	AppCacheService.Set(cacheKey, &models.JWTSaltGet{SaltA: jwt_object.SaltA, SaltB: jwt_object.SaltB})

	return salt_a, salt_b

}
