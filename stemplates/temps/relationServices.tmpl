package repository

import (
	"context"
	"fmt"
	"strconv"

	"{{ .ProjectName }}/{{ .AppName }}/models"
	 "gorm.io/gorm"
	//"github.com/jinzhu/copier"
)




// ##########################################################
// ##########  Relationship  Services to {{.FieldName}}
// ##########################################################

func (s *{{ .AppName | toPascalCase }}Repository) Add{{.ParentName}}To{{.FieldName}}(ctx context.Context, {{.ParentName | toLowerCaseName}}ID, {{.LowerFieldName}}ID string) error {
	// Fetching
	var {{.LowerParentName}} models.{{.ParentName}}
	{{.ParentName | toLowerCaseName}}_id, err := strconv.Atoi({{.ParentName | toLowerCaseName}}ID)
	if err != nil {
		return err
	}

	if res := s.DB.WithContext(ctx).First(&{{.LowerParentName}}, {{.LowerParentName}}_id); res.Error != nil {
		return fmt.Errorf("{{.LowerParentName}} not found: %v", res.Error)

	}

	var {{.LowerFieldName}} models.{{.FieldName}}
	{{.LowerFieldName}}_id, err := strconv.Atoi({{.LowerFieldName}}ID)
	if err != nil {
		return err
	}

	// Fetching
	if res := s.DB.WithContext(ctx).First(&{{.LowerFieldName}}, {{.LowerFieldName}}_id); res.Error != nil {
		return fmt.Errorf("{{.LowerFieldName}} not found: %v", res.Error)
	}

	err= s.withTransaction(ctx, func(tx *gorm.DB) error {

		if err := tx.Model(&{{.LowerParentName}}).Association("{{.FieldName}}s").Append(&{{.LowerFieldName}}); err != nil {
			return fmt.Errorf("failed to associate add relation: %v", err)
		}
		return nil
	})

	if err != nil {
		return err
	}

	// Removing Cache if update sucess
	cacheKey_all := "{{.ParentName}}_{{.FieldName}}_all:" + {{.ParentName | toLowerCaseName}}ID
	cacheKey_none := "{{.ParentName}}_{{.FieldName}}_none:" + {{.ParentName | toLowerCaseName}}ID
	s.Cache.Delete(cacheKey_all)
	s.Cache.Delete(cacheKey_none)


	return nil
}

func (s *{{ .AppName | toPascalCase }}Repository) Remove{{ .ParentName}}From{{.FieldName}}(ctx context.Context, {{.ParentName | toLowerCaseName}}ID, {{.LowerFieldName}}ID string) error {
	// Fetching
	var {{.LowerParentName}} models.{{.ParentName}}
	{{.ParentName | toLowerCaseName}}_id, err := strconv.Atoi({{.ParentName | toLowerCaseName}}ID)
	if err !=nil {
		return  err
	}

	if res := s.DB.WithContext(ctx).First(&{{.LowerParentName}}, {{.LowerParentName}}_id); res.Error != nil {
		return fmt.Errorf("{{.LowerParentName}} not found: %v", res.Error)

	}

	var {{.LowerFieldName}} models.{{.FieldName}}
	{{.LowerFieldName}}_id, err := strconv.Atoi({{.LowerFieldName}}ID)
	if err !=nil {
		return  err
	}

	// Fetching
	if res := s.DB.WithContext(ctx).First(&{{.LowerFieldName}}, {{.LowerFieldName}}_id); res.Error != nil {
		return fmt.Errorf("{{.LowerFieldName}} not found: %v", res.Error.Error())
	}

	err = s.withTransaction(ctx, func(tx *gorm.DB) error {
		if err := tx.Model(&{{.LowerParentName}}).Association("{{.FieldName}}s").Delete(&{{.LowerFieldName}}); err != nil {
			return fmt.Errorf("failed to remove relation: %v", err)
		}
		return nil
	})

	if err != nil {
		return err
	}

	// Removing Cache if update sucess
	cacheKey_all := "{{.ParentName}}_{{.FieldName}}_all:" + {{.ParentName | toLowerCaseName}}ID
	cacheKey_none := "{{.ParentName}}_{{.FieldName}}_none:" + {{.ParentName | toLowerCaseName}}ID
	s.Cache.Delete(cacheKey_all)
	s.Cache.Delete(cacheKey_none)


	return nil
}


func (s *{{ .AppName | toPascalCase }}Repository) Get{{.ParentName}}{{.FieldName}}s(ctx context.Context, {{.ParentName | toLowerCaseName}}ID string, pagination models.Pagination) ([]models.{{.FieldName}}Get, uint, error) {
	{{.ParentName | toLowerCaseName}}_id, err := strconv.Atoi({{.ParentName | toLowerCaseName}}ID)
	if err != nil {
		return  nil,0,fmt.Errorf("invalid {{.ParentName | toLowerCaseName}} ID: %v", err)
	}
	// results var
	var {{.LowerFieldName}}s []models.{{.FieldName}}Get
	var total int64

	{{- if  .MtM }}

	join_string := "LEFT JOIN {{.TableName}} ur ON {{.LowerFieldName}}s.id = ur.{{.LowerFieldName}}_id"
	filter_string := "{{.LowerParentName}}_id = ?"


	err = s.DB.WithContext(ctx).Model(&models.{{.FieldName}}{}).Joins(join_string).Where(filter_string, {{.LowerParentName}}_id).Count(&total).Error
	if err != nil {
		return nil, 0, err
	}

	_ = pagination.Validate()
	offset := int((pagination.Page - 1) * pagination.Size)
	err = s.DB.WithContext(ctx).Model(&models.{{.FieldName}}{}).Joins(join_string).Where(filter_string, {{.LowerParentName}}_id).Order("{{.LowerFieldName}}s.id asc").Limit(int(pagination.Size)).Offset(offset).Scan(&{{.LowerFieldName}}s).Error
	if err != nil {
		return  nil,0, fmt.Errorf("failed to fetch {{.LowerFieldName}}s: %v", err)
	}
	{{- end }}

	{{- if .OtM}}
	otm_string := "{{.LowerParentName}}_id = ?"
	err = s.DB.WithContext(ctx).Model(&models.{{.FieldName}}{}).Where(otm_string, {{.LowerParentName}}_id).Count(&total).Error
	if err != nil {
		return nil, 0, err
	}

	_ = pagination.Validate()
	offset := int((pagination.Page - 1) * pagination.Size)
	err = s.DB.WithContext(ctx).Model(&models.{{.FieldName}}{}).Where(otm_string, {{.LowerParentName}}_id).Order("{{.LowerFieldName}}s.id asc").Limit(int(pagination.Size)).Offset(offset).Scan(&{{.LowerFieldName}}s).Error
	if err != nil {
		return nil, 0, err
	}

	{{- end}}

	return {{.LowerFieldName}}s, uint(total), nil
}
// #########################
// No Pagination Services###
// #########################

func (s *{{ .AppName | toPascalCase }}Repository) GetAll{{.FieldName}}sFor{{.ParentName}}(ctx context.Context, {{.ParentName | toLowerCaseName}}ID string) ([]models.{{.FieldName}}Get, error) {
	{{.ParentName | toLowerCaseName}}_id, err := strconv.Atoi({{.ParentName | toLowerCaseName}}ID)
	if err != nil {
		return  nil,fmt.Errorf("invalid {{.ParentName | toLowerCaseName}} ID: %v", err)
	}
	// results var
	var {{.LowerFieldName}}s []models.{{.FieldName}}Get


	 // checking Cache if it exists
   	cacheKey := "{{.ParentName}}_{{.FieldName}}_all:" + {{.ParentName | toLowerCaseName}}ID
	if cached{{.FieldName}}, found := s.Cache.Get(cacheKey); found {
		return cached{{.FieldName}}.([]models.{{.FieldName}}Get), nil
	}


	{{- if  .MtM }}

	join_string := "LEFT JOIN {{.TableName}} ur ON {{.LowerFieldName}}s.id = ur.{{.LowerFieldName}}_id"
	filter_string := "ur.{{.LowerParentName}}_id = ?"


	err = s.DB.WithContext(ctx).Model(&models.{{.FieldName}}{}).Joins(join_string).Where(filter_string, {{.LowerParentName}}_id).Order("{{.LowerFieldName}}s.id asc").Scan(&{{.LowerFieldName}}s).Error
	if err != nil {
		return nil,fmt.Errorf("failed to fetch {{.LowerFieldName}}s: %v", err)
	}
	{{- end }}

	{{- if .OtM}}
	otm_string := "{{.LowerFieldName}}s.{{.LowerParentName}}_id = ?"


	err = s.DB.WithContext(ctx).Model(&models.{{.FieldName}}{}).Where(otm_string, {{.LowerParentName}}_id).Order("{{.LowerFieldName}}s.id asc").Scan(&{{.LowerFieldName}}s).Error
	if err != nil {
		return nil, err
	}


	{{- end}}


	// Setting Cache before returning the user
	cache_copy := make([]models.{{.FieldName}}Get,len({{.LowerFieldName}}s))
	copy(cache_copy,{{.LowerFieldName}}s)
    s.Cache.Set(cacheKey, cache_copy)


	return {{.LowerFieldName}}s, nil
}


func (s *{{ .AppName | toPascalCase }}Repository) GetAll{{.FieldName}}s{{.ParentName | toLowerCaseName}}DoesNotHave(ctx context.Context, {{.ParentName | toLowerCaseName}}ID string) ([]models.{{.FieldName}}Get, error) {
	{{.ParentName | toLowerCaseName}}_id, err := strconv.Atoi({{.ParentName | toLowerCaseName}}ID)
	if err != nil {
		return  nil,fmt.Errorf("invalid {{.ParentName | toLowerCaseName}} ID: %v", err)
	}
	// results var
	var {{.LowerFieldName}}s []models.{{.FieldName}}Get

	 // checking Cache if it exists
   	cacheKey := "{{.ParentName}}_{{.FieldName}}_none:" + {{.ParentName | toLowerCaseName}}ID
	if cached{{.FieldName}}, found := s.Cache.Get(cacheKey); found {
		return cached{{.FieldName}}.([]models.{{.FieldName}}Get), nil
	}


	{{- if  .MtM }}

	join_string := "LEFT JOIN {{.TableName}} ur ON {{.LowerFieldName}}s.id = ur.{{.LowerFieldName}}_id AND ur.{{.LowerParentName}}_id = ?"
	filter_string := "ur.{{.LowerParentName}}_id IS NULL"


	err = s.DB.WithContext(ctx).Model(&models.{{.FieldName}}{}).Joins(join_string,{{.LowerParentName}}_id).Where(filter_string).Distinct("{{.LowerFieldName}}s.*").Order("{{.LowerFieldName}}s.id asc").Scan(&{{.LowerFieldName}}s).Error
	if err != nil {
		return  nil,fmt.Errorf("failed to fetch {{.LowerFieldName}}s: %v", err)
	}
	{{- end }}

	{{- if .OtM}}
	otm_string := "{{.LowerFieldName}}s.{{.LowerParentName}}_id IS NULL  OR {{.LowerFieldName}}s.{{.LowerParentName}}_id != ?"


	err= s.DB.WithContext(ctx).Model(&models.{{.FieldName}}{}).Where(otm_string, {{.LowerParentName}}_id).Order("{{.LowerFieldName}}s.id asc").Scan(&{{.LowerFieldName}}s).Error
	if err != nil {
		return nil, err
	}

	{{- end}}

	// Setting Cache before returning the user
	cache_copy := make([]models.{{.FieldName}}Get,len({{.LowerFieldName}}s))
	copy(cache_copy,{{.LowerFieldName}}s)
    s.Cache.Set(cacheKey, cache_copy)

	return {{.LowerFieldName}}s, nil
}
