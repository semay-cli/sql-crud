package scheduler

import (
	"fmt"
	"os/exec"

	"time"
	"{{.ProjectName}}/logs"
	"{{.ProjectName}}/database"


)




func {{ .AppName | toPascalCase }}LogClear() {
	// // Add a task to move to Logs Directory Every Interval, Interval to Be Provided From Configuration File
	databaseLoggerFile, _ := database.LoggerFile("{{ .AppName | replaceString }}")
	defer databaseLoggerFile.Close()
	//  App should not start
	log_file, _ := logs.Logfile("{{ .AppName | replaceString }}")
	defer log_file.Close()

	// Move{{ .AppName | toPascalCase }}Logs()()

	err := databaseLoggerFile.Truncate(0)
	if err != nil {
		fmt.Println("Error truncating gorm logger file:", err)
	}
	lerr := log_file.Truncate(0)
	if lerr != nil {
		fmt.Println("Error truncating log file:", err)
	}

}

func Move{{ .AppName | toPascalCase }}Logs() {
	currentTime := time.Now()
	FileName := fmt.Sprintf("%v-%v-%v-%v-%v", currentTime.Year(), currentTime.Month(), currentTime.Day(), currentTime.Hour(), currentTime.Minute())
	//  make sure to replace the names of log files correctly here
	Command := fmt.Sprintf("cp {{ .AppName | replaceString }}_blue.log logs/{{ .AppName | replaceString }}_blue-%v.log", FileName)
	Command2 := fmt.Sprintf("cp {{ .AppName | replaceString }}_gorm.log logs/{{ .AppName | replaceString }}_gorm-%v.log", FileName)
	if _, err := exec.Command("bash", "-c", Command).Output(); err != nil {
		fmt.Printf("error: %v\n", err)
	}

	if _, err := exec.Command("bash", "-c", Command2).Output(); err != nil {
		fmt.Printf("error: %v\n", err)
	}
}
