package cache

import (
	"strconv"
	"time"
	"sync"

	"{{ .ProjectName }}/configs"
	"github.com/dgraph-io/ristretto"
)

type CacheService struct {
	cache       *ristretto.Cache
	cfg         *configs.EnvConfig
	deletedKeys sync.Map
}

func NewCacheService(cfg *configs.EnvConfig) (*CacheService, error) {
	number_of_counters, _ := strconv.ParseInt(cfg.GetOrDefault("NUMBER_OF_COUNTERS", "250"), 10, 64)
	cache_size, _ := strconv.ParseInt(cfg.GetOrDefault("MAX_CACHE_SIZE", "250"), 10, 64)
	buffer_items, _ := strconv.ParseInt(cfg.GetOrDefault("BUFFER_ITEMS", "64"), 10, 64)

	cache, err := ristretto.NewCache(&ristretto.Config{
		NumCounters: number_of_counters, // Number of keys to track frequency
		MaxCost:     cache_size << 20,   // Maximum cache size (500MB)
		BufferItems: buffer_items,       // Number of keys per Get buffer
	})
	if err != nil {
		return nil, err
	}
	return &CacheService{cache: cache, cfg: cfg}, nil
}

func (c *CacheService) Get(key string) (any, bool) {
	if _, deleted := c.deletedKeys.Load(key); deleted {
		return nil, false // Treat as not found
	}
	c.deletedKeys.Delete(key) // In case it's been soft-deleted before
	return c.cache.Get(key)
}

func (c *CacheService) Set(key string, value any) bool {
	c.deletedKeys.Delete(key) // In case it's been soft-deleted befor
	minutes, _ := strconv.Atoi(c.cfg.GetOrDefault("BUFFER_ITEMS", "10"))
	ttl := time.Duration(minutes) * time.Minute
	return c.cache.SetWithTTL(key, value, 1, ttl)
}

func (c *CacheService) Delete(key string) {
	c.deletedKeys.Store(key, struct{}{})
	c.cache.Del(key)
	c.cache.Wait() // Ensure the deletion is processed
}
